.TH openTIDAL_DeletePlaylist 3 "04 Jan 2021" "libopenTIDAL 0.0.1" "libopenTIDAL Manual"
.SH NAME
openTIDAL_AddPlaylistItem, openTIDAL_AddPlaylistItems \- Manipulate playlists
.SH SYNOPSIS
.B #include <openTIDAL/openTIDAL.h>

.BI "const int openTIDAL_AddPlaylistItem (openTIDAL_SessionContainer *session, const char *playlistId, const char *itemId, const char *onArtifactNotFound, const char *onDupes);"

.BI "const int openTIDAL_AddPlaylistItems (openTIDAL_SessionContainer *session, const char *playlistId, const char **itemIds, const int size, const char *onArtifactNotFound, const char *onDupes);"
.SH DESCRIPTION
The openTIDAL_AddPlaylist family of service functions adds an artefact to a playlist.
Different from the openTIDAL_Get* service functions, only the parsed status gets returned.
These functions are not available in the restricted client-id authorisation mode
(\fIopenTIDAL_SessionInit(3)\fP).

A unique feature of \fBlibopenTIDAL\fP(3) is the ability to add multiple artefacts of the same type.
This is done by creating an array of artefacts and parsing it to the correct parameter.
One \fBmust\fP specify the correct size of the array. C doesn't know the size of a referenced
object.

The ArtifactNotFound parameter alters the behaviour of the TIDAL API, not finding the artefact.
When adding an array of artefacts, one might choose to skip the missing artefact (Enum: "SKIP")
instead of giving up (ENUM: "FAIL").

The onDupes parameter alters the behaviour of the TIDAL API if the artefact occurs multiple times.
Three enums are available: "ADD", "SKIP", "FAIL".

.SH RETURN VALUE
\fBlibopenTIDAL\fP(3) has a global set of specified returned values implemented.
Not only are the HTTP response-codes part of the parsing but also TIDALs own
API status and sub-status codes. An accurate status of the http request/response
gets returned.
