.TH openTIDAL_GetPlaylist 3 "04 Jan 2021" "libopenTIDAL 0.0.1" "libopenTIDAL Manual"
.SH NAME
openTIDAL_GetPlaylist, openTIDAL_GetPlaylistItems, openTIDAL_GetPlaylistEntityTag \- Request playlist metadata
.SH SYNOPSIS
.B #include <openTIDAL/openTIDAL.h>

.BI "openTIDAL_ContentContainer *openTIDAL_GetPlaylist (openTIDAL_SessionContainer *session, const char *playlistid);"

.BI "openTIDAL_ContentContainer *openTIDAL_GetPlaylistItems (openTIDAL_SessionContainer *session, const char *playlistid, const int limit, const int offset);"

.BI "char *openTIDAL_GetPlaylistEntityTag (openTIDAL_SessionContainer *session, const char *playlistid);"
.SH DESCRIPTION
The openTIDAL_GetPlaylist family of service functions requests playlist metadata from the TIDAL API. These service calls
\fBmust\fP have a corresponding call to \fIopenTIDAL_StructDelete(3)\fP when the operation is complete
(except for \fBopenTIDAL_GetPlaylistEntityTag\fP()).

The \fBopenTIDAL_GetPlaylist\fP() function (GET /v1/playlists/{uuid}) requests playlist metadata. Specify the playlistid parameter
with the playlist UUID.

The \fBopenTIDAL_GetPlaylistItems\fP() function (GET /v1/playlists/{uuid}/items) requests playlist content (tracks and videos).
This service function supports pagination and limitation. Keep in mind that the TIDAL API has restricted limits.
The "totalNumberOfItems" integer specifies the number of items that the playlist contains, regardless of the limit/offset.
Use this value in combination with the total number of items inside the items pool (\fIopenTIDAL_ContentContainer(7)\fP)
to determine if a subsequent offset request is needed.

The \fBopenTIDAL_GetPlaylistEntityTag\fP() function (HEAD /v1/playlists/{uuid}) requests the http header and parses the entity-tag key
of the playlist. This entity-tag is used for optimistic concurrency control, as a way to help prevent simultaneous updates of
a resource from overwriting each other. Applied with the http header key "If-None-Match".
\fBopenTIDAL_GetPlaylistEntityTag\fP() allocates an ASCII String with the http entity-tag value. You need to free the 
allocated memory after use. Entity-tag handling is integrated into all \fBlibopenTIDAL\fP() resource manipulation service functions.

.SH STRUCTURE
\fIopenTIDAL_PlaylistContainer(7)\fP

\fIopenTIDAL_ItemsContainer(7)\fP
.SH RETURN VALUE
If no memory allocation error occurred in allocating the \fIopenTIDAL_ContentContainer(7)\fP, a
pointer to a \fIopenTIDAL_ContentContainer(7)\fP will be returned.
With this function the playlist/items structure inside the \fIopenTIDAL_ContentContainer(7)\fP is allocated and
populated.
Otherwise it returns a NULL pointer.
(See \fIopenTIDAL_StatusCodes(7)\fP and \fIopenTIDAL_ContentContainer(7)\fP).
.SH EXAMPLE
\fIopenTIDAL_ServiceRequestExample(7)\fP
