.TH openTIDAL_AuthCreateBearerToken 3 "04 Jan 2021" "libopenTIDAL 0.0.1" "libopenTIDAL Manual"
.SH NAME
openTIDAL_AuthCreateBearerToken \- Request an access- and refresh-token
.SH SYNOPSIS
.B #include <openTIDAL/openTIDAL.h>

.BI "openTIDAL_ContentContainer *openTIDAL_AuthCreateBearerToken (openTIDAL_SessionContainer *session, const char *device_code);"
.SH DESCRIPTION
While the application is waiting for the user to complete the authorization flow
\fIopenTIDAL_AuthCreateCode(3)\fP in their browser,
the device meanwhile begins polling \fIopenTIDAL_AuthCreateBearerToken(3)\fP
to request an access token.

The application makes a POST request with the deviceCode at the rate specified by interval.
The device should continue requesting an access token until a response other than
2 is returned, either the user grants (StatusCode 1) or denies the request
or the device code expires after the specified timeframe.
.SH STRUCTURE
\fIopenTIDAL_LoginTokenContainer(7)\fP
.SH RETURN VALUE
If no memory allocation error occurred in allocating the \fIopenTIDAL_ContentContainer(7)\fP, a
pointer to a \fIopenTIDAL_ContentContainer(7)\fP will be returned.
With this function the token structure inside the \fIopenTIDAL_ContentContainer(7)\fP is allocated and
populated.
Otherwise it returns a NULL pointer.
(See \fIopenTIDAL_StatusCodes(7)\fP and \fIopenTIDAL_ContentContainer(7)\fP).
.SH EXAMPLE
.nf
openTIDAL_SessionContainer session;
openTIDAL_Verbose (1);
openTIDAL_SessionInit (&session, "/Users/hugo/Desktop/config.json");
openTIDAL_ContentContainer *resolve = openTIDAL_AuthCreateUserCode (&session);
if (resolve)
    if (resolve->status == 1) {
        printf ("UserCode: %s\n", resolve->code->userCode);
        while (time (NULL) <= resolve->code->expires_in) {
            sleep (resolve->code->interval);
            openTIDAL_ContentContainer *token;

            token = openTIDAL_AuthCreateBearerToken (&session, resolve->code->deviceCode);
            if (token) {
                if (token->status == 2)
                    printf ("%s\n", "Authorization Pending...");
                else if (token->status == 1) {
                    printf ("%s\n", "Authorization Successfull!");
                    openTIDAL_SessionCreateFile (&session);
                    break;
                }
                openTIDAL_StructDelete (token);
            }
        }
    };
openTIDAL_StructDelete (resolve);
openTIDAL_SessionCleanup (&session);
.fi
