.TH OTServiceAddPlaylistItems 3 "11 Jan 2021" "libopenTIDAL 1.0.0" "libopenTIDAL Manual"
.SH NAME
OTServiceAddPlaylistItems \- Add multiple artefacts to a playlist
.SH SYNOPSIS
.B #include <openTIDAL/openTIDAL.h>

.BI "enum OTStatus OTServiceAddPlaylistItems (struct OTSessionContainer *" session ", const char *const " id ", const char **" itemIds ", const int " size ", const char *" onArtifactNotFound ", const char *" onDupes ", void *" threadHandle ");"
.SH DESCRIPTION
The OTServiceAddPlaylistItems service function adds multiple artefacts to a playlist.

A unique feature of \fBlibopenTIDAL\fP(3) is the ability to add multiple artefacts of the same type.
This is done by creating an array of artefacts and parsing it to the correct parameter.
One \fBmust\fP specify the correct size of the array. C doesn't know the size of a referenced
object.

The ArtifactNotFound parameter alters the behaviour of the TIDAL API, not finding the artefact.
When adding an array of artefacts, one might choose to skip the missing artefact ("SKIP")
instead of giving up ("FAIL").

The onDupes parameter alters the behaviour of the TIDAL API if the artefact occurs multiple times.
Three enums are available: "ADD", "SKIP", "FAIL".

.nf
.B Thread Handle
.fi
You must never share the same handle in multiple threads. You can pass the handles around among threads, but you must never use a single handle from more than one thread at any given time.

Use the session main handle by parsing a NULL pointer.
.SH RETURN VALUE
\fIOTStatus(7)\fP
.SH "SEE ALSO"
.BR OTServiceGetPlaylistEntityTag "(3), " OTServiceCreatePlaylist "(3), " OTServiceMovePlaylistItem "(3), "
.BR OTServiceDeletePlaylistItem "(3), " OTServiceAddPlaylistItem "(3) "
