.TH OTServiceGetPlaylistEntityTag 3 "11 Jan 2021" "libopenTIDAL 1.0.0" "libopenTIDAL Manual"
.SH NAME
OTServiceGetPlaylistEntityTag \- Request the playlist entity tag
.SH SYNOPSIS
.B #include <openTIDAL/openTIDAL.h>

.BI "char *OTServiceGetPlaylistEntityTag (struct OTSessionContainer *session, const char *const id, void *threadHandle);"
.SH DESCRIPTION
The OTServiceGetPlaylistEntityTag service function requests the http header and parses the entity-tag key
of the playlist. This entity-tag is used for optimistic concurrency control, as a way to help prevent simultaneous updates of
a resource from overwriting each other. Applied with the http header key "If-None-Match".
\fBOTServiceGetPlaylistEntityTag\fP() allocates an ASCII String with the http entity-tag value. You need to free the 
allocated memory after use. Entity-tag handling is integrated into all \fBlibopenTIDAL\fP() resource manipulation service functions.

This service call \fBmust\fP have a corresponding call to \fIOTDeallocContainer(3)\fP when the operation is complete.

.nf
.B Thread Handle
.fi
You must never share the same handle in multiple threads. You can pass the handles around among threads, but you must never use a single handle from more than one thread at any given time.

Use the session main handle by parsing a NULL pointer.
.SH RETURN VALUE
If no memory allocation error occurred in allocating the \fIOTContentContainer(7)\fP, a
pointer to an \fIOTContentContainer(7)\fP will be returned.
Otherwise a NULL pointer will be returned.
.SH "SEE ALSO"
.BR OTServiceCreatePlaylist "(3), " OTServiceDeletePlaylistItem "(3), " OTServiceMovePlaylistItem "(3), "
.BR OTServiceAddPlaylistItem "(3), " OTServiceAddPlaylistItems "(3) "
